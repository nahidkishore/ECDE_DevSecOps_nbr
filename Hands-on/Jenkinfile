pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'


    }


    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        
         stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/nahidkishore/Shop-safely-now.git'
            }
        }
        
        

stage('Secrets Scan with Gitleaks') {
    steps {
        echo " Scanning for secrets using Gitleaks..."
        sh '''
            gitleaks detect --source . --redact --no-git -v || echo "‚ö†Ô∏è Gitleaks found issues!"
        '''
    }
}


stage('üîê Secrets Scan with Gitleaks') {
    steps {
        script {
            echo " Scanning for hardcoded secrets using Gitleaks..."

            // Run gitleaks and capture exit status
            def status = sh (
                script: 'gitleaks detect --source . --redact --no-git -v',
                returnStatus: true
            )

            if (status != 0) {
                error " Gitleaks found secrets in the code! Failing pipeline."
            } else {
                echo " No secrets found. Gitleaks scan passed."
            }
        }
    }
}


stage("SonarQube Analysis") {
    steps {
        script {
            echo 'üîç Starting SonarQube Static Code Analysis...'
        }

        withSonarQubeEnv('sonar-server') {
            sh """
                ${SCANNER_HOME}/bin/sonar-scanner \
                -Dsonar.projectKey=Shop-Safely-Now \
                -Dsonar.projectName=Shop-Safely-Now \
                -Dsonar.java.binaries=. \
                -Dsonar.qualitygate.wait=true
            """
        }

        script {
            echo '‚úÖ SonarQube Scanner executed. Waiting for Quality Gate result...'
        }
    }
}

        stage("SonarQube Quality Gate") {
    steps {
        timeout(time: 2, unit: 'MINUTES') {
            script {
                echo 'üïí Waiting for SonarQube Quality Gate result (max 2 minutes)...'

                def qualityGate = waitForQualityGate(
                    abortPipeline: true, 
                    credentialsId: 'sonar-token'
                )

                echo "üõ°Ô∏è SonarQube Quality Gate Status: ${qualityGate.status}"

                if (qualityGate.status != 'OK') {
                    error "‚ùå Quality Gate failed: ${qualityGate.status}. Blocking the pipeline."
                } else {
                    echo '‚úÖ Quality Gate passed!'
                }
            }
        }
    }
}


        
        
        
        
    }
}
